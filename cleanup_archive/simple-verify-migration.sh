#!/bin/bash
# ========================================
# PAQUETES EL CLUB v3.1 - Verificaci√≥n Simple de Migraci√≥n
# ========================================

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

echo "üîç ========================================"
echo "üîç VERIFICACI√ìN SIMPLE DE MIGRACI√ìN"
echo "üîç PAQUETES EL CLUB v3.1"
echo "üîç ========================================"
echo ""

# 1. Verificar que la aplicaci√≥n est√© funcionando
log_info "1. Verificando estado de la aplicaci√≥n..."

# Health check
HEALTH_RESPONSE=$(curl -s -k https://guia.papyrus.com.co/health)
if [[ "$HEALTH_RESPONSE" == *"health"* ]]; then
    log_success "Health check: OK - $HEALTH_RESPONSE"
else
    log_error "Health check: FALL√ì"
    exit 1
fi

# 2. Verificar p√°gina principal
log_info "2. Verificando p√°gina principal..."
MAIN_PAGE=$(curl -s -k https://guia.papyrus.com.co/ | head -1)
if [[ "$MAIN_PAGE" == *"<!DOCTYPE html>"* ]]; then
    log_success "P√°gina principal: OK"
else
    log_error "P√°gina principal: FALL√ì"
fi

# 3. Verificar estado de contenedores
log_info "3. Verificando estado de contenedores..."
CONTAINER_STATUS=$(docker ps --format "table {{.Names}}\t{{.Status}}")
echo "$CONTAINER_STATUS"

# 4. Verificar logs de la aplicaci√≥n
log_info "4. Verificando logs de la aplicaci√≥n..."
APP_LOGS=$(docker logs paqueteria_v31_app --tail 5)
echo "√öltimos 5 logs de la aplicaci√≥n:"
echo "$APP_LOGS"

# 5. Verificar que la aplicaci√≥n puede acceder a la base de datos
log_info "5. Verificando acceso a base de datos desde la aplicaci√≥n..."

# Intentar acceder a un endpoint que requiera base de datos
API_RESPONSE=$(curl -s -k https://guia.papyrus.com.co/api/health)
if [[ "$API_RESPONSE" == *"health"* ]] || [[ "$API_RESPONSE" == *"status"* ]]; then
    log_success "API health check: OK"
else
    log_warning "API health check: No disponible o diferente formato"
fi

# 6. Verificar archivos de migraci√≥n
log_info "6. Verificando archivos de migraci√≥n..."
if [ -f "/home/ubuntu/Paquetes/migration_backup/paqueteria_local_20250828_083834.sql" ]; then
    BACKUP_SIZE=$(du -h /home/ubuntu/Paquetes/migration_backup/paqueteria_local_20250828_083834.sql | cut -f1)
    log_success "Backup encontrado: $BACKUP_SIZE"
else
    log_warning "Backup no encontrado"
fi

# 7. Verificar configuraci√≥n de la aplicaci√≥n
log_info "7. Verificando configuraci√≥n de la aplicaci√≥n..."
if [ -f "/home/ubuntu/Paquetes/.env" ]; then
    log_success "Archivo .env encontrado"
    # Verificar que la configuraci√≥n de base de datos est√© presente
    if grep -q "DATABASE_URL" /home/ubuntu/Paquetes/.env; then
        log_success "Configuraci√≥n de base de datos presente"
    else
        log_warning "Configuraci√≥n de base de datos no encontrada"
    fi
else
    log_error "Archivo .env no encontrado"
fi

echo ""
echo "üìä RESUMEN DE VERIFICACI√ìN:"
echo "============================"

# Contar contenedores funcionando
RUNNING_CONTAINERS=$(docker ps --format "{{.Names}}" | wc -l)
log_info "Contenedores funcionando: $RUNNING_CONTAINERS"

# Verificar contenedores espec√≠ficos
if docker ps --format "{{.Names}}" | grep -q "paqueteria_v31_app"; then
    log_success "Contenedor de aplicaci√≥n: FUNCIONANDO"
else
    log_error "Contenedor de aplicaci√≥n: NO FUNCIONANDO"
fi

if docker ps --format "{{.Names}}" | grep -q "paqueteria_v31_nginx"; then
    log_success "Contenedor de Nginx: FUNCIONANDO"
else
    log_error "Contenedor de Nginx: NO FUNCIONANDO"
fi

if docker ps --format "{{.Names}}" | grep -q "paqueteria_v31_redis"; then
    log_success "Contenedor de Redis: FUNCIONANDO"
else
    log_error "Contenedor de Redis: NO FUNCIONANDO"
fi

echo ""
echo "üåê URLs DE ACCESO:"
echo "=================="
echo "üîó Aplicaci√≥n: https://guia.papyrus.com.co"
echo "üîó Health Check: https://guia.papyrus.com.co/health"
echo "üîó API: https://guia.papyrus.com.co/api/"

echo ""
echo "üîç VERIFICACI√ìN MANUAL RECOMENDADA:"
echo "==================================="
echo "1. üåê Acceder a https://guia.papyrus.com.co"
echo "2. üîê Intentar hacer login con usuarios existentes"
echo "3. üì¶ Verificar que los paquetes est√©n disponibles"
echo "4. üë• Verificar listado de clientes"
echo "5. üì¢ Verificar anuncios de paquetes"
echo "6. ‚öôÔ∏è  Verificar configuraciones del sistema"

echo ""
if [[ "$HEALTH_RESPONSE" == *"health"* ]] && [[ "$MAIN_PAGE" == *"<!DOCTYPE html>"* ]]; then
    log_success "‚úÖ VERIFICACI√ìN B√ÅSICA EXITOSA"
    log_success "La aplicaci√≥n est√° funcionando correctamente"
    log_info "Los datos se han migrado si la aplicaci√≥n responde correctamente"
else
    log_error "‚ùå VERIFICACI√ìN B√ÅSICA FALL√ì"
    log_error "Hay problemas con la aplicaci√≥n"
fi

echo ""
log_info "Para una verificaci√≥n completa de datos, accede manualmente a la aplicaci√≥n"
log_success "¬°Verificaci√≥n completada! üîç"
