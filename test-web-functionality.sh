#!/bin/bash

# ========================================
# PAQUETES EL CLUB v3.1 - Prueba de Funcionalidad Web
# ========================================

echo "üåê Prueba de Funcionalidad Web y Base de Datos"
echo "================================================"
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar resultados
show_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

echo -e "${BLUE}1. Verificando servicios Docker...${NC}"
if docker ps | grep -q "paqueteria_v31_app"; then
    show_result 0 "Aplicaci√≥n ejecut√°ndose"
else
    show_result 1 "Aplicaci√≥n no est√° ejecut√°ndose"
    exit 1
fi

if docker ps | grep -q "paqueteria_v31_nginx"; then
    show_result 0 "Nginx ejecut√°ndose"
else
    show_result 1 "Nginx no est√° ejecut√°ndose"
    exit 1
fi

if docker ps | grep -q "paqueteria_v31_redis"; then
    show_result 0 "Redis ejecut√°ndose"
else
    show_result 1 "Redis no est√° ejecut√°ndose"
    exit 1
fi

echo ""
echo -e "${BLUE}2. Verificando conectividad web...${NC}"

# Probar p√°gina principal
if curl -s -f http://localhost/ > /dev/null; then
    show_result 0 "P√°gina principal accesible"
else
    show_result 1 "P√°gina principal no accesible"
fi

# Probar p√°gina de b√∫squeda
if curl -s -f http://localhost/search > /dev/null; then
    show_result 0 "P√°gina de b√∫squeda accesible"
else
    show_result 1 "P√°gina de b√∫squeda no accesible"
fi

# Probar p√°gina de login
if curl -s -f http://localhost/login > /dev/null; then
    show_result 0 "P√°gina de login accesible"
else
    show_result 1 "P√°gina de login no accesible"
fi

echo ""
echo -e "${BLUE}3. Verificando API...${NC}"

# Probar health check
if curl -s -f http://localhost/health > /dev/null; then
    show_result 0 "Health check funcionando"
else
    show_result 1 "Health check fallando"
fi

# Probar API de autenticaci√≥n
if curl -s -f http://localhost/api/auth/check > /dev/null; then
    show_result 0 "API de autenticaci√≥n funcionando"
else
    show_result 1 "API de autenticaci√≥n fallando"
fi

echo ""
echo -e "${BLUE}4. Verificando base de datos desde la aplicaci√≥n...${NC}"

# Verificar conexi√≥n a la base de datos
if docker exec paqueteria_v31_app python3 -c "
from src.database.database import engine
from sqlalchemy import text
conn = engine.connect()
result = conn.execute(text('SELECT COUNT(*) FROM users'))
print('Usuarios:', result.fetchone()[0])
conn.close()
" > /dev/null 2>&1; then
    show_result 0 "Conexi√≥n a base de datos funcionando"
else
    show_result 1 "Error de conexi√≥n a base de datos"
fi

# Verificar tablas principales
if docker exec paqueteria_v31_app python3 -c "
from src.database.database import engine
from sqlalchemy import text
conn = engine.connect()
result = conn.execute(text('SELECT COUNT(*) FROM packages'))
print('Paquetes:', result.fetchone()[0])
conn.close()
" > /dev/null 2>&1; then
    show_result 0 "Tabla de paquetes accesible"
else
    show_result 1 "Error accediendo a tabla de paquetes"
fi

# Verificar tablas principales
if docker exec paqueteria_v31_app python3 -c "
from src.database.database import engine
from sqlalchemy import text
conn = engine.connect()
result = conn.execute(text('SELECT COUNT(*) FROM customers'))
print('Clientes:', result.fetchone()[0])
conn.close()
" > /dev/null 2>&1; then
    show_result 0 "Tabla de clientes accesible"
else
    show_result 1 "Error accediendo a tabla de clientes"
fi

echo ""
echo -e "${BLUE}5. Verificando logs de la aplicaci√≥n...${NC}"

# Verificar que no hay errores de base de datos en los logs
if docker logs paqueteria_v31_app --tail 50 2>&1 | grep -q "Base de datos AWS RDS inicializada correctamente"; then
    show_result 0 "Base de datos inicializada correctamente"
else
    show_result 1 "Base de datos no se inicializ√≥ correctamente"
fi

# Verificar que no hay errores de conexi√≥n
if docker logs paqueteria_v31_app --tail 50 2>&1 | grep -q "could not translate host name"; then
    show_result 1 "Error de conexi√≥n a base de datos local detectado"
else
    show_result 0 "No hay errores de conexi√≥n a base de datos local"
fi

echo ""
echo -e "${BLUE}6. Prueba de funcionalidad completa...${NC}"

# Simular una b√∫squeda b√°sica
echo "   Probando funcionalidad de b√∫squeda..."
if curl -s -f "http://localhost/search" | grep -q "Buscar paquetes"; then
    show_result 0 "Funcionalidad de b√∫squeda cargando correctamente"
else
    show_result 1 "Funcionalidad de b√∫squeda con problemas"
fi

# Verificar formulario de login
echo "   Probando formulario de login..."
if curl -s -f "http://localhost/login" | grep -q "Iniciar sesi√≥n"; then
    show_result 0 "Formulario de login cargando correctamente"
else
    show_result 1 "Formulario de login con problemas"
fi

echo ""
echo "================================================"
echo -e "${BLUE}üìä RESUMEN DE PRUEBAS${NC}"
echo "================================================"

# Contar pruebas exitosas
success_count=0
total_count=0

# Contar servicios
if docker ps | grep -q "paqueteria_v31_app"; then ((success_count++)); fi; ((total_count++))
if docker ps | grep -q "paqueteria_v31_nginx"; then ((success_count++)); fi; ((total_count++))
if docker ps | grep -q "paqueteria_v31_redis"; then ((success_count++)); fi; ((total_count++))

# Contar conectividad web
if curl -s -f http://localhost/ > /dev/null; then ((success_count++)); fi; ((total_count++))
if curl -s -f http://localhost/search > /dev/null; then ((success_count++)); fi; ((total_count++))
if curl -s -f http://localhost/login > /dev/null; then ((success_count++)); fi; ((total_count++))

# Contar API
if curl -s -f http://localhost/health > /dev/null; then ((success_count++)); fi; ((total_count++))
if curl -s -f http://localhost/api/auth/check > /dev/null; then ((success_count++)); fi; ((total_count++))

# Contar base de datos
if docker exec paqueteria_v31_app python3 -c "from src.database.database import engine; print('OK')" > /dev/null 2>&1; then ((success_count++)); fi; ((total_count++))

echo -e "${GREEN}Pruebas exitosas: $success_count/$total_count${NC}"

if [ $success_count -eq $total_count ]; then
    echo ""
    echo -e "${GREEN}üéâ ¬°TODAS LAS FUNCIONALIDADES EST√ÅN FUNCIONANDO CORRECTAMENTE!${NC}"
    echo -e "${GREEN}‚úÖ La aplicaci√≥n web est√° funcionando${NC}"
    echo -e "${GREEN}‚úÖ La base de datos AWS RDS est√° conectada${NC}"
    echo -e "${GREEN}‚úÖ Todas las p√°ginas son accesibles${NC}"
    echo -e "${GREEN}‚úÖ La API est√° funcionando${NC}"
else
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Algunas funcionalidades tienen problemas${NC}"
    echo -e "${YELLOW}üîß Revisa las pruebas fallidas arriba${NC}"
fi

echo ""
echo "================================================"
echo -e "${BLUE}üåê URLs de Prueba:${NC}"
echo "   P√°gina principal: http://localhost/"
echo "   B√∫squeda: http://localhost/search"
echo "   Login: http://localhost/login"
echo "   Health Check: http://localhost/health"
echo "   API Auth: http://localhost/api/auth/check"
echo "================================================"
