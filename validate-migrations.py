#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PAQUETES EL CLUB v3.1 - Validaci√≥n de Migraciones Alembic
==========================================================

Este script valida el estado de las migraciones de Alembic y verifica que est√©n
correctamente aplicadas en la base de datos.
"""

import sys
import os
import subprocess
from typing import List, Dict, Tuple
from dataclasses import dataclass
from datetime import datetime

# Agregar el directorio src al path
current_dir = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(current_dir, 'code', 'src')
sys.path.insert(0, src_path)

try:
    from sqlalchemy import create_engine, text
    from config import settings
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("Aseg√∫rate de ejecutar este script desde el directorio ra√≠z del proyecto")
    sys.exit(1)

@dataclass
class MigrationInfo:
    """Informaci√≥n de una migraci√≥n"""
    revision: str
    description: str
    applied: bool
    applied_date: str = None
    error: str = None

class MigrationValidator:
    """Validador de migraciones de Alembic"""
    
    def __init__(self):
        self.engine = None
        self.migrations_dir = os.path.join('code', 'alembic', 'versions')
        self.results: List[MigrationInfo] = []
        
    def connect(self):
        """Conectar a la base de datos"""
        try:
            self.engine = create_engine(settings.database_url)
            print("‚úÖ Conectado a la base de datos correctamente")
            return True
        except Exception as e:
            print(f"‚ùå Error conectando a la base de datos: {e}")
            return False
    
    def get_migration_files(self) -> List[str]:
        """Obtener lista de archivos de migraci√≥n"""
        migrations = []
        try:
            if os.path.exists(self.migrations_dir):
                for file in os.listdir(self.migrations_dir):
                    if file.endswith('.py') and not file.startswith('__'):
                        migrations.append(file)
                migrations.sort()
            else:
                print(f"‚ö†Ô∏è  Directorio de migraciones no encontrado: {self.migrations_dir}")
        except Exception as e:
            print(f"‚ùå Error leyendo directorio de migraciones: {e}")
        
        return migrations
    
    def get_current_version_from_db(self) -> str:
        """Obtener versi√≥n actual desde la base de datos"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(text("SELECT version_num FROM alembic_version"))
                row = result.fetchone()
                if row:
                    return row[0]
                else:
                    return "No hay versi√≥n registrada"
        except Exception as e:
            print(f"‚ùå Error obteniendo versi√≥n actual: {e}")
            return "Error"
    
    def get_applied_migrations_from_db(self) -> List[str]:
        """Obtener migraciones aplicadas desde la base de datos"""
        applied = []
        try:
            with self.engine.connect() as conn:
                # Verificar si existe la tabla alembic_version
                result = conn.execute(text("""
                    SELECT table_name FROM information_schema.tables 
                    WHERE table_name = 'alembic_version'
                """))
                if not result.fetchone():
                    print("‚ö†Ô∏è  Tabla alembic_version no existe")
                    return applied
                
                # Obtener versi√≥n actual
                result = conn.execute(text("SELECT version_num FROM alembic_version"))
                row = result.fetchone()
                if row:
                    applied.append(row[0])
                    
        except Exception as e:
            print(f"‚ùå Error obteniendo migraciones aplicadas: {e}")
        
        return applied
    
    def parse_migration_file(self, filename: str) -> Tuple[str, str]:
        """Parsear archivo de migraci√≥n para obtener revisi√≥n y descripci√≥n"""
        revision = filename.split('_')[0]
        description = filename.replace('.py', '').replace(f'{revision}_', '')
        return revision, description
    
    def validate_migration(self, filename: str, applied_migrations: List[str]) -> MigrationInfo:
        """Validar una migraci√≥n espec√≠fica"""
        revision, description = self.parse_migration_file(filename)
        
        migration = MigrationInfo(
            revision=revision,
            description=description,
            applied=revision in applied_migrations
        )
        
        if migration.applied:
            print(f"   ‚úÖ {revision}: {description}")
        else:
            print(f"   ‚ùå {revision}: {description} (NO APLICADA)")
        
        return migration
    
    def validate_all_migrations(self):
        """Validar todas las migraciones"""
        print("\nüîç Iniciando validaci√≥n de migraciones...")
        print("=" * 60)
        
        if not self.connect():
            return False
        
        # Obtener migraciones del sistema de archivos
        migration_files = self.get_migration_files()
        if not migration_files:
            print("‚ùå No se encontraron archivos de migraci√≥n")
            return False
        
        print(f"üìÅ Archivos de migraci√≥n encontrados: {len(migration_files)}")
        
        # Obtener migraciones aplicadas desde BD
        applied_migrations = self.get_applied_migrations_from_db()
        current_version = self.get_current_version_from_db()
        
        print(f"üóÑÔ∏è  Versi√≥n actual en BD: {current_version}")
        print(f"üìä Migraciones aplicadas: {len(applied_migrations)}")
        
        # Validar cada migraci√≥n
        for filename in migration_files:
            migration = self.validate_migration(filename, applied_migrations)
            self.results.append(migration)
        
        return True
    
    def check_migration_consistency(self):
        """Verificar consistencia de las migraciones"""
        print("\nüîç Verificando consistencia de migraciones...")
        
        if not self.results:
            print("‚ùå No hay resultados de validaci√≥n")
            return False
        
        # Verificar secuencia de migraciones
        revisions = [m.revision for m in self.results]
        applied_revisions = [m.revision for m in self.results if m.applied]
        
        print(f"üìã Secuencia de migraciones: {' -> '.join(revisions)}")
        print(f"‚úÖ Migraciones aplicadas: {' -> '.join(applied_revisions)}")
        
        # Verificar si hay gaps en las migraciones aplicadas
        if len(applied_revisions) > 1:
            for i in range(len(applied_revisions) - 1):
                current_idx = revisions.index(applied_revisions[i])
                next_idx = revisions.index(applied_revisions[i + 1])
                if next_idx - current_idx > 1:
                    print(f"‚ö†Ô∏è  Gap detectado entre {applied_revisions[i]} y {applied_revisions[i + 1]}")
        
        return True
    
    def generate_report(self):
        """Generar reporte de validaci√≥n"""
        print("\n" + "=" * 60)
        print("üìä REPORTE DE VALIDACI√ìN DE MIGRACIONES")
        print("=" * 60)
        
        total_migrations = len(self.results)
        applied_migrations = sum(1 for m in self.results if m.applied)
        pending_migrations = total_migrations - applied_migrations
        
        print(f"üìà Resumen General:")
        print(f"   - Total de migraciones: {total_migrations}")
        print(f"   - Migraciones aplicadas: {applied_migrations}")
        print(f"   - Migraciones pendientes: {pending_migrations}")
        
        if pending_migrations > 0:
            print(f"\n‚ö†Ô∏è  MIGRACIONES PENDIENTES:")
            for migration in self.results:
                if not migration.applied:
                    print(f"   üî¥ {migration.revision}: {migration.description}")
            
            print(f"\nüí° RECOMENDACIONES:")
            print(f"   1. Ejecutar migraciones pendientes: alembic upgrade head")
            print(f"   2. Verificar que no haya conflictos en las migraciones")
            print(f"   3. Probar la aplicaci√≥n despu√©s de aplicar las migraciones")
        else:
            print(f"\nüéâ ¬°TODAS LAS MIGRACIONES EST√ÅN APLICADAS!")
        
        print(f"\nüìã Estado por migraci√≥n:")
        for migration in self.results:
            status = "‚úÖ" if migration.applied else "‚ùå"
            print(f"   {status} {migration.revision}: {migration.description}")
        
        return pending_migrations == 0
    
    def suggest_fixes(self):
        """Sugerir correcciones para problemas encontrados"""
        print(f"\nüîß SUGERENCIAS DE CORRECCI√ìN:")
        
        pending_count = sum(1 for m in self.results if not m.applied)
        
        if pending_count > 0:
            print(f"   1. Aplicar migraciones pendientes:")
            print(f"      cd code")
            print(f"      alembic upgrade head")
            print(f"")
            print(f"   2. Si hay problemas con migraciones espec√≠ficas:")
            print(f"      alembic current  # Ver estado actual")
            print(f"      alembic history  # Ver historial")
            print(f"      alembic downgrade -1  # Revertir √∫ltima migraci√≥n")
            print(f"")
            print(f"   3. Verificar integridad de la base de datos:")
            print(f"      python validate-model-sync.py")
        
        print(f"   4. Reiniciar la aplicaci√≥n despu√©s de aplicar migraciones:")
        print(f"      docker restart paqueteria_v31_app")

def main():
    """Funci√≥n principal"""
    print("üõ°Ô∏è  VALIDADOR DE MIGRACIONES ALEMBIC")
    print("=" * 60)
    print(f"‚è∞ Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    validator = MigrationValidator()
    
    if validator.validate_all_migrations():
        validator.check_migration_consistency()
        success = validator.generate_report()
        validator.suggest_fixes()
        
        if success:
            print("\nüéâ ¬°Validaci√≥n de migraciones completada exitosamente!")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è  Se encontraron migraciones pendientes que requieren atenci√≥n")
            sys.exit(1)
    else:
        print("\n‚ùå Error durante la validaci√≥n de migraciones")
        sys.exit(1)

if __name__ == "__main__":
    main()
