version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: paqueteria_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-paqueteria}
      POSTGRES_USER: ${POSTGRES_USER:-paqueteria_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_postgres_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - paqueteria_network
    restart: unless-stopped

  redis:
    image: redis:7.0-alpine
    container_name: paqueteria_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - paqueteria_network
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paqueteria_app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-paqueteria_user}:${POSTGRES_PASSWORD:-your_postgres_password}@postgres:5432/${POSTGRES_DB:-paqueteria}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-your-email@gmail.com}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-your-app-password}
      - SMTP_FROM_NAME=${SMTP_FROM_NAME:-PAQUETES EL CLUB}
      - LIWA_API_KEY=${LIWA_API_KEY:-}
      - LIWA_PHONE_NUMBER=${LIWA_PHONE_NUMBER:-}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8001:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - paqueteria_network
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paqueteria_celery_worker
    command: celery -A src.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-paqueteria_user}:${POSTGRES_PASSWORD:-your_postgres_password}@postgres:5432/${POSTGRES_DB:-paqueteria}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-your-email@gmail.com}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-your-app-password}
      - LIWA_API_KEY=${LIWA_API_KEY:-}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - paqueteria_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: paqueteria_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./uploads:/var/www/uploads
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - paqueteria_network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: paqueteria_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - paqueteria_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: paqueteria_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-your_grafana_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - paqueteria_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  paqueteria_network:
    driver: bridge
