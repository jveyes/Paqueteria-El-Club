#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PAQUETES EL CLUB v3.1 - Validador Completo del Sistema
=======================================================

Este script ejecuta todos los validadores en secuencia:
1. Validaci√≥n de sincronizaci√≥n de modelos
2. Validaci√≥n de migraciones
3. Health check avanzado
4. Genera un reporte consolidado
"""

import sys
import os
import subprocess
import time
from datetime import datetime
from typing import List, Dict, Any

class CompleteValidator:
    """Validador completo del sistema"""
    
    def __init__(self):
        self.validators = [
            {
                'name': 'Sincronizaci√≥n de Modelos',
                'script': 'validate-model-sync.py',
                'description': 'Valida que los modelos SQLAlchemy est√©n sincronizados con la BD'
            },
            {
                'name': 'Migraciones Alembic',
                'script': 'validate-migrations.py',
                'description': 'Verifica el estado de las migraciones de la base de datos'
            },
            {
                'name': 'Health Check Avanzado',
                'script': 'advanced-health-check.py',
                'description': 'Realiza un health check completo de la aplicaci√≥n'
            }
        ]
        self.results: List[Dict[str, Any]] = []
        
    def run_validator(self, validator_info: Dict[str, str]) -> Dict[str, Any]:
        """Ejecutar un validador espec√≠fico"""
        print(f"\nüîç Ejecutando: {validator_info['name']}")
        print(f"üìù Descripci√≥n: {validator_info['description']}")
        print("-" * 60)
        
        start_time = time.time()
        
        try:
            # Ejecutar el script de validaci√≥n
            result = subprocess.run(
                [sys.executable, validator_info['script']],
                capture_output=True,
                text=True,
                timeout=120  # 2 minutos de timeout
            )
            
            execution_time = time.time() - start_time
            
            # Determinar si fue exitoso basado en el c√≥digo de salida
            success = result.returncode == 0
            
            # Parsear la salida para obtener informaci√≥n √∫til
            output_lines = result.stdout.strip().split('\n')
            error_lines = result.stderr.strip().split('\n') if result.stderr else []
            
            # Buscar informaci√≥n clave en la salida
            summary_info = self._extract_summary_info(output_lines)
            
            result_info = {
                'name': validator_info['name'],
                'script': validator_info['script'],
                'success': success,
                'return_code': result.returncode,
                'execution_time': execution_time,
                'output': output_lines,
                'errors': error_lines,
                'summary': summary_info
            }
            
            # Mostrar resultado
            if success:
                print(f"‚úÖ {validator_info['name']}: Completado exitosamente")
                if summary_info:
                    for key, value in summary_info.items():
                        print(f"   üìä {key}: {value}")
            else:
                print(f"‚ùå {validator_info['name']}: Fall√≥ (c√≥digo: {result.returncode})")
                if error_lines:
                    print(f"   üí• Errores: {error_lines[0] if error_lines else 'N/A'}")
            
            return result_info
            
        except subprocess.TimeoutExpired:
            execution_time = time.time() - start_time
            print(f"‚è∞ {validator_info['name']}: Timeout despu√©s de {execution_time:.1f}s")
            return {
                'name': validator_info['name'],
                'script': validator_info['script'],
                'success': False,
                'return_code': -1,
                'execution_time': execution_time,
                'output': [],
                'errors': ['Timeout expired'],
                'summary': {'status': 'Timeout'}
            }
            
        except Exception as e:
            execution_time = time.time() - start_time
            print(f"üí• {validator_info['name']}: Error inesperado - {e}")
            return {
                'name': validator_info['name'],
                'script': validator_info['script'],
                'success': False,
                'return_code': -1,
                'execution_time': execution_time,
                'output': [],
                'errors': [str(e)],
                'summary': {'status': 'Error inesperado'}
            }
    
    def _extract_summary_info(self, output_lines: List[str]) -> Dict[str, str]:
        """Extraer informaci√≥n de resumen de la salida del validador"""
        summary = {}
        
        for line in output_lines:
            line = line.strip()
            
            # Buscar patrones espec√≠ficos en la salida
            if "Tablas validadas:" in line:
                summary['tablas_validadas'] = line.split(':')[1].strip()
            elif "Migraciones aplicadas:" in line:
                summary['migraciones_aplicadas'] = line.split(':')[1].strip()
            elif "Verificaciones exitosas:" in line:
                summary['verificaciones_exitosas'] = line.split(':')[1].strip()
            elif "Total de migraciones:" in line:
                summary['total_migraciones'] = line.split(':')[1].strip()
            elif "Total de verificaciones:" in line:
                summary['total_verificaciones'] = line.split(':')[1].strip()
            elif "Versi√≥n actual en BD:" in line:
                summary['version_bd'] = line.split(':')[1].strip()
        
        return summary
    
    def run_all_validators(self):
        """Ejecutar todos los validadores"""
        print("üõ°Ô∏è  VALIDADOR COMPLETO DEL SISTEMA")
        print("=" * 60)
        print(f"‚è∞ Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìã Validadores a ejecutar: {len(self.validators)}")
        
        total_start_time = time.time()
        
        for validator in self.validators:
            result = self.run_validator(validator)
            self.results.append(result)
            
            # Pausa entre validadores
            if validator != self.validators[-1]:  # No pausar despu√©s del √∫ltimo
                print("\n‚è≥ Esperando 2 segundos antes del siguiente validador...")
                time.sleep(2)
        
        total_execution_time = time.time() - total_start_time
        
        print(f"\n‚è±Ô∏è  Tiempo total de ejecuci√≥n: {total_execution_time:.1f} segundos")
        
        return True
    
    def generate_consolidated_report(self):
        """Generar reporte consolidado de todos los validadores"""
        print("\n" + "=" * 60)
        print("üìä REPORTE CONSOLIDADO DE VALIDACI√ìN")
        print("=" * 60)
        
        total_validators = len(self.results)
        successful_validators = sum(1 for r in self.results if r['success'])
        failed_validators = total_validators - successful_validators
        
        print(f"üìà Resumen General:")
        print(f"   - Total de validadores: {total_validators}")
        print(f"   - Validadores exitosos: {successful_validators}")
        print(f"   - Validadores fallidos: {failed_validators}")
        print(f"   - Tasa de √©xito: {(successful_validators/total_validators)*100:.1f}%")
        
        if failed_validators > 0:
            print(f"\n‚ö†Ô∏è  VALIDADORES FALLIDOS:")
            for result in self.results:
                if not result['success']:
                    print(f"\n   üî¥ {result['name']}:")
                    print(f"      - Script: {result['script']}")
                    print(f"      - C√≥digo de salida: {result['return_code']}")
                    print(f"      - Tiempo de ejecuci√≥n: {result['execution_time']:.1f}s")
                    if result['errors']:
                        print(f"      - Errores: {', '.join(result['errors'][:2])}")
                    if result['summary']:
                        for key, value in result['summary'].items():
                            print(f"      - {key}: {value}")
        else:
            print(f"\nüéâ ¬°TODOS LOS VALIDADORES EXITOSOS!")
        
        print(f"\nüìã Estado por validador:")
        for result in self.results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            time_str = f"{result['execution_time']:.1f}s"
            print(f"   {status} {result['name']} ({time_str})")
        
        return failed_validators == 0
    
    def generate_recommendations(self):
        """Generar recomendaciones basadas en los resultados"""
        print(f"\nüí° RECOMENDACIONES:")
        
        if not any(r['success'] for r in self.results):
            print("   üî¥ Todos los validadores fallaron:")
            print("      - Verificar conectividad a la base de datos")
            print("      - Verificar que los servicios Docker est√©n ejecut√°ndose")
            print("      - Verificar configuraci√≥n del entorno")
            return
        
        # Recomendaciones espec√≠ficas basadas en resultados
        for result in self.results:
            if not result['success']:
                print(f"\n   üî¥ {result['name']}:")
                
                if "Sincronizaci√≥n de Modelos" in result['name']:
                    print("      - Ejecutar migraciones pendientes")
                    print("      - Verificar estructura de la base de datos")
                    print("      - Revisar modelos SQLAlchemy")
                
                elif "Migraciones Alembic" in result['name']:
                    print("      - Ejecutar: alembic upgrade head")
                    print("      - Verificar archivos de migraci√≥n")
                    print("      - Revisar estado de la tabla alembic_version")
                
                elif "Health Check Avanzado" in result['name']:
                    print("      - Verificar servicios Docker")
                    print("      - Revisar logs de la aplicaci√≥n")
                    print("      - Verificar conectividad de red")
        
        print(f"\n   üü¢ Validadores exitosos:")
        successful_names = [r['name'] for r in self.results if r['success']]
        for name in successful_names:
            print(f"      - ‚úÖ {name}")
        
        print(f"\n   üìö Pr√≥ximos pasos recomendados:")
        print("      1. Resolver problemas de validadores fallidos")
        print("      2. Ejecutar validadores individuales para m√°s detalles")
        print("      3. Implementar correcciones sugeridas")
        print("      4. Re-ejecutar validaci√≥n completa")
    
    def save_report_to_file(self):
        """Guardar reporte en archivo"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"validation_report_{timestamp}.txt"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("REPORTE DE VALIDACI√ìN COMPLETA\n")
                f.write("=" * 50 + "\n")
                f.write(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                for result in self.results:
                    f.write(f"VALIDADOR: {result['name']}\n")
                    f.write(f"Estado: {'‚úÖ EXITOSO' if result['success'] else '‚ùå FALLIDO'}\n")
                    f.write(f"Script: {result['script']}\n")
                    f.write(f"Tiempo: {result['execution_time']:.1f}s\n")
                    f.write(f"C√≥digo: {result['return_code']}\n")
                    
                    if result['summary']:
                        f.write("Resumen:\n")
                        for key, value in result['summary'].items():
                            f.write(f"  - {key}: {value}\n")
                    
                    if result['errors']:
                        f.write("Errores:\n")
                        for error in result['errors']:
                            f.write(f"  - {error}\n")
                    
                    f.write("\n" + "-" * 30 + "\n\n")
            
            print(f"\nüìÑ Reporte guardado en: {filename}")
            
        except Exception as e:
            print(f"\n‚ö†Ô∏è  Error guardando reporte: {e}")

def main():
    """Funci√≥n principal"""
    validator = CompleteValidator()
    
    if validator.run_all_validators():
        success = validator.generate_consolidated_report()
        validator.generate_recommendations()
        validator.save_report_to_file()
        
        if success:
            print("\nüéâ ¬°Validaci√≥n completa exitosa!")
            print("‚úÖ El sistema est√° funcionando correctamente")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è  Se encontraron problemas que requieren atenci√≥n")
            print("üîß Revisa las recomendaciones y ejecuta los validadores individuales")
            sys.exit(1)
    else:
        print("\n‚ùå Error durante la validaci√≥n completa")
        sys.exit(1)

if __name__ == "__main__":
    main()
