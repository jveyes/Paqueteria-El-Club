version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: paqueteria_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-paqueteria}
      POSTGRES_USER: ${POSTGRES_USER:-paqueteria_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - paqueteria_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-paqueteria_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7.0-alpine
    container_name: paqueteria_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - paqueteria_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicaci√≥n principal
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: paqueteria_app_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-paqueteria_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-paqueteria}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM_NAME=${SMTP_FROM_NAME}
      - LIWA_API_KEY=${LIWA_API_KEY}
      - LIWA_PHONE_NUMBER=${LIWA_PHONE_NUMBER}
      - ENVIRONMENT=production
      - DEBUG=false
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - paqueteria_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker de Celery
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: paqueteria_celery_worker_prod
    command: celery -A src.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-paqueteria_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-paqueteria}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - LIWA_API_KEY=${LIWA_API_KEY}
      - ENVIRONMENT=production
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - paqueteria_network
    restart: unless-stopped

  # Beat de Celery (tareas programadas)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: paqueteria_celery_beat_prod
    command: celery -A src.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-paqueteria_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-paqueteria}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - paqueteria_network
    restart: unless-stopped

  # Nginx (Proxy reverso)
  nginx:
    image: nginx:alpine
    container_name: paqueteria_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - app_uploads:/var/www/uploads
      - ./ssl:/etc/nginx/ssl
    depends_on:
      app:
        condition: service_healthy
    networks:
      - paqueteria_network
    restart: unless-stopped

  # Monitoreo - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: paqueteria_prometheus_prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - paqueteria_network
    restart: unless-stopped

  # Monitoreo - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: paqueteria_grafana_prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - paqueteria_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  paqueteria_network:
    driver: bridge
