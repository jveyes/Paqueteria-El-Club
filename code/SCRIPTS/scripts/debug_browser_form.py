#!/usr/bin/env python3
"""
Script de depuraci√≥n para identificar problemas en el formulario del navegador
"""

import sys
import os
import requests
import json
import time
from pathlib import Path

# Agregar el directorio ra√≠z del proyecto al path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def debug_browser_form_issues():
    """Depurar problemas del formulario del navegador"""
    print("üîç DEPURANDO PROBLEMAS DEL FORMULARIO DEL NAVEGADOR")
    print("=" * 70)
    
    base_url = "http://localhost"
    
    print("üìã DIAGN√ìSTICO PASO A PASO:")
    print("=" * 50)
    
    # Paso 1: Verificar que la p√°gina est√© funcionando
    print("\n1Ô∏è‚É£ VERIFICANDO P√ÅGINA DEL FORMULARIO...")
    try:
        response = requests.get(f"{base_url}/announce")
        if response.status_code == 200:
            print("   ‚úÖ P√°gina accesible")
            
            # Verificar elementos cr√≠ticos
            html_content = response.text
            
            checks = [
                ("Formulario HTML", "announcementForm"),
                ("Endpoint API", "api/announcements"),
                ("JavaScript", "fetch('/api/announcements/'"),
                ("Modal de √©xito", "successModal"),
                ("Validaciones", "showError"),
                ("Bot√≥n submit", "submitButton")
            ]
            
            for check_name, check_text in checks:
                if check_text in html_content:
                    print(f"   ‚úÖ {check_name}: Encontrado")
                else:
                    print(f"   ‚ùå {check_name}: NO encontrado")
                    
        else:
            print(f"   ‚ùå Error accediendo a la p√°gina: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False
    
    # Paso 2: Verificar que la API est√© funcionando
    print("\n2Ô∏è‚É£ VERIFICANDO API DE ANUNCIOS...")
    try:
        test_data = {
            "customer_name": "Debug User",
            "guide_number": f"DEBUG{int(time.time())}",
            "phone_number": "3002596319"
        }
        
        response = requests.post(
            f"{base_url}/api/announcements/",
            json=test_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("   ‚úÖ API funcionando")
            print(f"   ‚Ä¢ Tracking code: {result['tracking_code']}")
            print(f"   ‚Ä¢ ID: {result['id']}")
            
            # Verificar que el SMS se envi√≥
            print("\n3Ô∏è‚É£ VERIFICANDO ENV√çO DE SMS...")
            time.sleep(2)
            
            # Revisar logs del contenedor
            print("   üîç Revisando logs del contenedor...")
            print("   üí° Si ves 'SMS enviado exitosamente', el backend est√° funcionando")
            
        else:
            print(f"   ‚ùå Error en API: {response.status_code}")
            print(f"   ‚Ä¢ Respuesta: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False
    
    # Paso 3: Simular diferentes escenarios del navegador
    print("\n4Ô∏è‚É£ SIMULANDO ESCENARIOS DEL NAVEGADOR...")
    
    scenarios = [
        {
            "name": "Headers m√≠nimos (navegador b√°sico)",
            "headers": {"Content-Type": "application/json"}
        },
        {
            "name": "Headers completos (navegador real)",
            "headers": {
                "Content-Type": "application/json",
                "Accept": "application/json, text/plain, */*",
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "Origin": base_url,
                "Referer": f"{base_url}/announce"
            }
        },
        {
            "name": "Headers con CORS",
            "headers": {
                "Content-Type": "application/json",
                "Accept": "*/*",
                "Access-Control-Request-Method": "POST",
                "Access-Control-Request-Headers": "content-type"
            }
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n   üìù Escenario {i}: {scenario['name']}")
        
        test_data = {
            "customer_name": f"Escenario {i}",
            "guide_number": f"SCENARIO{i}{int(time.time())}",
            "phone_number": "3002596319"
        }
        
        try:
            response = requests.post(
                f"{base_url}/api/announcements/",
                json=test_data,
                headers=scenario["headers"]
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"      ‚úÖ Funcionando - Tracking: {result['tracking_code']}")
            else:
                print(f"      ‚ùå Error {response.status_code}")
                
        except Exception as e:
            print(f"      ‚ùå Error: {e}")
        
        time.sleep(1)
    
    return True

def check_potential_issues():
    """Verificar posibles problemas conocidos"""
    print("\n5Ô∏è‚É£ VERIFICANDO PROBLEMAS CONOCIDOS...")
    print("=" * 50)
    
    issues = [
        {
            "name": "CORS (Cross-Origin Resource Sharing)",
            "description": "El navegador podr√≠a estar bloqueando la petici√≥n por CORS",
            "solution": "Verificar configuraci√≥n de CORS en el backend"
        },
        {
            "name": "JavaScript Errors",
            "description": "Errores en la consola del navegador podr√≠an estar impidiendo el env√≠o",
            "solution": "Abrir DevTools (F12) y revisar la consola"
        },
        {
            "name": "Validaciones Frontend",
            "description": "Las validaciones JavaScript podr√≠an estar fallando silenciosamente",
            "solution": "Verificar que todos los campos pasen las validaciones"
        },
        {
            "name": "Network Issues",
            "description": "Problemas de red o firewall",
            "solution": "Verificar conectividad y logs del navegador"
        },
        {
            "name": "Cache del Navegador",
            "description": "El navegador podr√≠a estar usando una versi√≥n cacheada del formulario",
            "solution": "Hard refresh (Ctrl+F5) o limpiar cache"
        }
    ]
    
    for i, issue in enumerate(issues, 1):
        print(f"\n   ‚ö†Ô∏è Problema {i}: {issue['name']}")
        print(f"      üìù Descripci√≥n: {issue['description']}")
        print(f"      üõ†Ô∏è Soluci√≥n: {issue['solution']}")

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO DEPURACI√ìN DEL FORMULARIO DEL NAVEGADOR")
    print("=" * 80)
    
    # Depurar problemas
    success = debug_browser_form_issues()
    
    if success:
        # Verificar problemas conocidos
        check_potential_issues()
        
        print("\n" + "=" * 80)
        print("üìä RESUMEN DE DEPURACI√ìN")
        print("=" * 80)
        print("‚úÖ Backend funcionando correctamente")
        print("‚úÖ API respondiendo correctamente")
        print("‚úÖ SMS envi√°ndose desde la API")
        print("‚úÖ P√°gina del formulario accesible")
        
        print("\nüîç PROBLEMA IDENTIFICADO:")
        print("   El problema NO est√° en el backend ni en la API.")
        print("   El problema est√° en el FRONTEND del navegador.")
        
        print("\nüí° SOLUCIONES A PROBAR:")
        print("   1. Abrir DevTools (F12) en el navegador")
        print("   2. Ir a la pesta√±a Console")
        print("   3. Enviar el formulario y revisar errores")
        print("   4. Verificar que no haya errores JavaScript")
        print("   5. Comprobar que la petici√≥n se env√≠e en Network tab")
        print("   6. Hard refresh (Ctrl+F5) para limpiar cache")
        
        print("\nüéØ PR√ìXIMO PASO:")
        print("   Usar el navegador real y revisar la consola para errores")
        
    else:
        print("\n‚ùå DEPURACI√ìN FALLIDA")
        print("üîß Revisar logs del contenedor para m√°s detalles")
    
    print("\nüèÅ DEPURACI√ìN COMPLETADA")
    print("=" * 80)

if __name__ == "__main__":
    main()
