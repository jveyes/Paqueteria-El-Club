#!/usr/bin/env python3
"""
Script para simular exactamente el comportamiento del navegador
al enviar el formulario de anuncios
"""

import sys
import os
import requests
import json
import time
from pathlib import Path

# Agregar el directorio ra√≠z del proyecto al path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_browser_form_simulation():
    """Simular el env√≠o del formulario como lo har√≠a el navegador"""
    print("üåê SIMULANDO FORMULARIO DEL NAVEGADOR")
    print("=" * 60)
    
    base_url = "http://localhost"
    
    # Simular exactamente los datos que enviar√≠a el navegador
    browser_data = {
        "customer_name": "Usuario Navegador",
        "guide_number": f"BROWSER{int(time.time())}",
        "phone_number": "3002596319"
    }
    
    print(f"üìù Datos simulando navegador:")
    print(f"   ‚Ä¢ Nombre: {browser_data['customer_name']}")
    print(f"   ‚Ä¢ Gu√≠a: {browser_data['guide_number']}")
    print(f"   ‚Ä¢ Tel√©fono: {browser_data['phone_number']}")
    print()
    
    try:
        # Paso 1: Obtener la p√°gina del formulario (como har√≠a el navegador)
        print("üîç PASO 1: Obteniendo p√°gina del formulario...")
        response = requests.get(f"{base_url}/announce")
        
        if response.status_code == 200:
            print("‚úÖ P√°gina del formulario obtenida")
            print(f"   ‚Ä¢ Tama√±o: {len(response.text)} caracteres")
            
            # Verificar que contenga elementos del formulario
            if "announcementForm" in response.text:
                print("   ‚Ä¢ Formulario encontrado en HTML")
            else:
                print("   ‚ö†Ô∏è Formulario NO encontrado en HTML")
                
            if "api/announcements" in response.text:
                print("   ‚Ä¢ Endpoint API encontrado en HTML")
            else:
                print("   ‚ö†Ô∏è Endpoint API NO encontrado en HTML")
                
        else:
            print(f"‚ùå Error obteniendo p√°gina: {response.status_code}")
            return False
        
        # Paso 2: Simular env√≠o del formulario (exactamente como el navegador)
        print("\nüì§ PASO 2: Simulando env√≠o del formulario...")
        
        # Headers que enviar√≠a un navegador real
        browser_headers = {
            "Content-Type": "application/json",
            "Accept": "application/json, text/plain, */*",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Origin": base_url,
            "Referer": f"{base_url}/announce"
        }
        
        print("   ‚Ä¢ Headers del navegador configurados")
        print("   ‚Ä¢ Enviando POST a /api/announcements/")
        
        response = requests.post(
            f"{base_url}/api/announcements/",
            json=browser_data,
            headers=browser_headers
        )
        
        print(f"   ‚Ä¢ Respuesta del servidor: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Formulario enviado exitosamente")
            print(f"   ‚Ä¢ ID del anuncio: {result['id']}")
            print(f"   ‚Ä¢ C√≥digo de tracking: {result['tracking_code']}")
            print(f"   ‚Ä¢ Estado: {result['status']}")
            
            # Verificar que el SMS se envi√≥
            print("\nüì± PASO 3: Verificando env√≠o de SMS...")
            
            # Esperar un momento para que se procese el SMS
            time.sleep(3)
            
            # Verificar logs del contenedor
            print("   üîç Revisando logs del contenedor...")
            print("   üí° El SMS deber√≠a haberse enviado a 573002596319")
            
            return True
            
        else:
            print(f"‚ùå Error enviando formulario: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n: No se puede conectar al servidor")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_form_validation():
    """Probar validaciones del formulario"""
    print("\nüß™ PROBANDO VALIDACIONES DEL FORMULARIO")
    print("=" * 50)
    
    base_url = "http://localhost"
    
    # Casos de prueba que podr√≠an fallar en el navegador
    test_cases = [
        {
            "name": "Nombre con caracteres especiales",
            "data": {"customer_name": "Jos√© Mar√≠a-L√≥pez", "guide_number": f"TEST{int(time.time())}", "phone_number": "3002596319"},
            "expected": 200
        },
        {
            "name": "Gu√≠a con caracteres especiales",
            "data": {"customer_name": "Test User", "guide_number": f"TEST-{int(time.time())}", "phone_number": "3002596319"},
            "expected": 200
        },
        {
            "name": "Tel√©fono con formato especial",
            "data": {"customer_name": "Test User", "guide_number": f"TEST{int(time.time())}", "phone_number": "3002596319"},
            "expected": 200
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Prueba {i}: {test_case['name']}")
        
        try:
            response = requests.post(
                f"{base_url}/api/announcements/",
                json=test_case["data"],
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == test_case["expected"]:
                print(f"   ‚úÖ Estado correcto: {response.status_code}")
                if response.status_code == 200:
                    result = response.json()
                    print(f"   ‚Ä¢ Tracking: {result['tracking_code']}")
            else:
                print(f"   ‚ùå Estado incorrecto: {response.status_code}")
                print(f"   ‚Ä¢ Respuesta: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
        
        time.sleep(1)

def main():
    """Funci√≥n principal"""
    print("üöÄ SIMULACI√ìN COMPLETA DEL FORMULARIO DEL NAVEGADOR")
    print("=" * 80)
    
    # Simular formulario del navegador
    success = test_browser_form_simulation()
    
    if success:
        print("\nüéâ SIMULACI√ìN EXITOSA")
        print("‚úÖ El formulario se comporta como esperado")
        print("‚úÖ La API responde correctamente")
        print("‚úÖ El SMS deber√≠a haberse enviado")
        
        # Probar validaciones
        test_form_validation()
        
        print("\nüí° DIAGN√ìSTICO:")
        print("   Si el SMS NO llega desde el navegador pero S√ç desde la API:")
        print("   1. Verificar que el navegador est√© enviando los datos correctos")
        print("   2. Revisar la consola del navegador para errores JavaScript")
        print("   3. Verificar que el formulario est√© usando el endpoint correcto")
        print("   4. Comprobar que no haya bloqueos de CORS o seguridad")
        
    else:
        print("\n‚ùå SIMULACI√ìN FALLIDA")
        print("üîß Revisar logs del contenedor para m√°s detalles")
    
    print("\nüèÅ SIMULACI√ìN COMPLETADA")
    print("=" * 80)

if __name__ == "__main__":
    main()
