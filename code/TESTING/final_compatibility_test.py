#!/usr/bin/env python3
"""
Script final para verificar que todas las funcionalidades cr√≠ticas funcionen con AWS RDS
PAQUETES EL CLUB v3.1
"""

import requests
import json
import psycopg2
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://localhost:8001"
AWS_DB_CONFIG = {
    'host': 'ls-abe25e9bea57818f0ee32555c0e7b4a10e361535.ctobuhtlkwoj.us-east-1.rds.amazonaws.com',
    'port': 5432,
    'database': 'paqueteria',
    'user': 'jveyes',
    'password': 'a?HC!2.*1#?[==:|289qAI=)#V4kDzl$'
}

def print_header(title):
    """Imprimir encabezado de secci√≥n"""
    print(f"\n{'='*80}")
    print(f"üîç {title}")
    print(f"{'='*80}")

def print_subheader(title):
    """Imprimir subencabezado"""
    print(f"\n{'='*60}")
    print(f"üìã {title}")
    print(f"{'='*60}")

def test_database_connection():
    """Probar conexi√≥n a la base de datos"""
    print_subheader("PRUEBA DE CONEXI√ìN A BASE DE DATOS")
    
    try:
        conn = psycopg2.connect(**AWS_DB_CONFIG)
        cursor = conn.cursor()
        
        # Verificar que podemos hacer consultas b√°sicas
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        print(f"‚úÖ Conexi√≥n exitosa - Usuarios en BD: {user_count}")
        
        cursor.execute("SELECT COUNT(*) FROM packages")
        package_count = cursor.fetchone()[0]
        print(f"‚úÖ Paquetes en BD: {package_count}")
        
        cursor.execute("SELECT COUNT(*) FROM customers")
        customer_count = cursor.fetchone()[0]
        print(f"‚úÖ Clientes en BD: {customer_count}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_api_endpoints():
    """Probar endpoints cr√≠ticos de la API"""
    print_subheader("PRUEBA DE ENDPOINTS DE LA API")
    
    endpoints_to_test = [
        ("GET", "/health", "Health Check"),
        ("GET", "/docs", "Documentaci√≥n API"),
        ("POST", "/api/auth/login", "Login (requiere datos)"),
        ("GET", "/api/auth/me", "Usuario actual (requiere auth)"),
    ]
    
    successful_tests = 0
    
    for method, endpoint, description in endpoints_to_test:
        try:
            if method == "GET":
                response = requests.get(f"{BASE_URL}{endpoint}")
            else:
                response = requests.post(f"{BASE_URL}{endpoint}")
            
            if response.status_code in [200, 401, 422]:  # 401/422 son respuestas v√°lidas para endpoints que requieren auth
                print(f"‚úÖ {description}: Status {response.status_code}")
                successful_tests += 1
            else:
                print(f"‚ùå {description}: Status {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {description}: Error - {e}")
    
    return successful_tests == len(endpoints_to_test)

def test_authentication_flow():
    """Probar flujo completo de autenticaci√≥n"""
    print_subheader("PRUEBA DE FLUJO DE AUTENTICACI√ìN")
    
    try:
        # 1. Login
        login_data = {
            "username": "jveyes",
            "password": "admin123"
        }
        
        response = requests.post(f"{BASE_URL}/api/auth/login", data=login_data)
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            user = data.get("user", {})
            
            print(f"‚úÖ Login exitoso - Usuario: {user.get('username')}")
            print(f"‚úÖ Token generado: {token[:20]}...")
            
            # 2. Verificar token
            headers = {"Authorization": f"Bearer {token}"}
            me_response = requests.get(f"{BASE_URL}/api/auth/me", headers=headers)
            
            if me_response.status_code == 200:
                me_data = me_response.json()
                print(f"‚úÖ Token v√°lido - Usuario actual: {me_data.get('username')}")
                return True
            else:
                print(f"‚ùå Token inv√°lido - Status: {me_response.status_code}")
                return False
        else:
            print(f"‚ùå Login fall√≥ - Status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en flujo de autenticaci√≥n: {e}")
        return False

def test_password_reset_flow():
    """Probar flujo de recuperaci√≥n de contrase√±a"""
    print_subheader("PRUEBA DE RECUPERACI√ìN DE CONTRASE√ëA")
    
    try:
        # Solicitar restablecimiento
        reset_data = {
            "email": "jveyes@gmail.com"
        }
        
        response = requests.post(
            f"{BASE_URL}/api/auth/request-reset",
            json=reset_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Solicitud de restablecimiento exitosa")
            print(f"‚úÖ Mensaje: {data.get('message', 'N/A')}")
            return True
        else:
            print(f"‚ùå Solicitud de restablecimiento fall√≥ - Status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en flujo de recuperaci√≥n: {e}")
        return False

def test_database_operations():
    """Probar operaciones b√°sicas de base de datos"""
    print_subheader("PRUEBA DE OPERACIONES DE BASE DE DATOS")
    
    try:
        conn = psycopg2.connect(**AWS_DB_CONFIG)
        cursor = conn.cursor()
        
        # 1. Verificar usuarios
        cursor.execute("SELECT username, email, role FROM users LIMIT 3")
        users = cursor.fetchall()
        print(f"‚úÖ Consulta de usuarios exitosa - {len(users)} usuarios encontrados")
        
        # 2. Verificar paquetes
        cursor.execute("SELECT tracking_number, status FROM packages LIMIT 3")
        packages = cursor.fetchall()
        print(f"‚úÖ Consulta de paquetes exitosa - {len(packages)} paquetes encontrados")
        
        # 3. Verificar clientes
        cursor.execute("SELECT name, phone FROM customers LIMIT 3")
        customers = cursor.fetchall()
        print(f"‚úÖ Consulta de clientes exitosa - {len(customers)} clientes encontrados")
        
        # 4. Verificar tokens de restablecimiento
        cursor.execute("SELECT COUNT(*) FROM password_reset_tokens WHERE is_used = false")
        active_tokens = cursor.fetchone()[0]
        print(f"‚úÖ Tokens activos: {active_tokens}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error en operaciones de BD: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print_header("VERIFICACI√ìN FINAL DE COMPATIBILIDAD CON AWS RDS")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê URL Base: {BASE_URL}")
    print(f"üóÑÔ∏è  Base de datos: AWS RDS")
    
    tests = [
        ("Conexi√≥n a Base de Datos", test_database_connection),
        ("Endpoints de API", test_api_endpoints),
        ("Flujo de Autenticaci√≥n", test_authentication_flow),
        ("Recuperaci√≥n de Contrase√±a", test_password_reset_flow),
        ("Operaciones de Base de Datos", test_database_operations),
    ]
    
    successful_tests = 0
    total_tests = len(tests)
    
    for test_name, test_function in tests:
        print(f"\nüîç Ejecutando: {test_name}")
        if test_function():
            successful_tests += 1
            print(f"‚úÖ {test_name}: EXITOSO")
        else:
            print(f"‚ùå {test_name}: FALL√ì")
    
    print_header("RESULTADOS FINALES")
    print(f"‚úÖ Pruebas exitosas: {successful_tests}/{total_tests}")
    print(f"‚ùå Pruebas fallidas: {total_tests - successful_tests}/{total_tests}")
    
    if successful_tests == total_tests:
        print("\nüéâ ¬°TODAS LAS FUNCIONALIDADES CR√çTICAS FUNCIONAN CORRECTAMENTE!")
        print("‚úÖ Base de datos AWS RDS completamente operativa")
        print("‚úÖ API funcionando correctamente")
        print("‚úÖ Autenticaci√≥n funcionando")
        print("‚úÖ Recuperaci√≥n de contrase√±a funcionando")
        print("‚úÖ Operaciones de base de datos funcionando")
    else:
        print("\n‚ö†Ô∏è  HAY PROBLEMAS QUE NECESITAN ATENCI√ìN")
        print("Revisa los errores anteriores para identificar los problemas")
    
    print("\nüìã Credenciales de prueba:")
    print("   üë§ Usuario: jveyes")
    print("   üìß Email: jveyes@gmail.com")
    print("   üîë Contrase√±a: admin123")

if __name__ == "__main__":
    main()
