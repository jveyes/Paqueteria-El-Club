#!/usr/bin/env python3
# ========================================
# PAQUETES EL CLUB v3.1 - Auto Organize Watcher
# ========================================
#
# üéØ OBJETIVO: Observar cambios en archivos y organizar autom√°ticamente
# üìÖ FECHA: 2025-08-27
# üë§ AUTOR: Sistema Autom√°tico
# üîÑ VERSI√ìN: 1.0.0
#
# üìã USO:
#   python3 auto_organize_watcher.py                    # Iniciar observador
#   python3 auto_organize_watcher.py --daemon          # Ejecutar en segundo plano
#   python3 auto_organize_watcher.py --stop            # Detener observador
#
# üìä RESULTADOS:
#   - Log: code/logs/auto_organize_watcher.log
#   - PID: code/logs/watcher.pid
#   - Reportes autom√°ticos en code/TEST/reports/
#
# ‚ö†Ô∏è DEPENDENCIAS:
#   - Python 3.8+
#   - watchdog (pip install watchdog)
#   - auto_organize_files.py
#
# ========================================

import os
import sys
import time
import signal
import argparse
import logging
import subprocess
from pathlib import Path
from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class AutoOrganizeHandler(FileSystemEventHandler):
    """Manejador de eventos para organizaci√≥n autom√°tica"""
    
    def __init__(self, organizer_script: str):
        self.organizer_script = organizer_script
        self.last_organization = 0
        self.cooldown_period = 5  # Segundos entre organizaciones
        self.logger = logging.getLogger(__name__)
        
    def on_created(self, event):
        """Cuando se crea un archivo"""
        if not event.is_directory:
            self.logger.info(f"üìÑ Archivo creado: {event.src_path}")
            self.trigger_organization("archivo creado")
    
    def on_moved(self, event):
        """Cuando se mueve un archivo"""
        if not event.is_directory:
            self.logger.info(f"üìÅ Archivo movido: {event.src_path} ‚Üí {event.dest_path}")
            self.trigger_organization("archivo movido")
    
    def on_modified(self, event):
        """Cuando se modifica un archivo"""
        if not event.is_directory:
            # Solo organizar si es un archivo de configuraci√≥n o script
            file_path = Path(event.src_path)
            if any(pattern in file_path.name for pattern in ['*.sh', '*.py', '*.md', '*.conf', '*.config']):
                self.logger.info(f"‚úèÔ∏è Archivo modificado: {event.src_path}")
                self.trigger_organization("archivo modificado")
    
    def trigger_organization(self, reason: str):
        """Disparar organizaci√≥n autom√°tica"""
        current_time = time.time()
        
        # Evitar organizaciones muy frecuentes
        if current_time - self.last_organization < self.cooldown_period:
            self.logger.info(f"‚è≥ Organizaci√≥n en cooldown ({self.cooldown_period}s restantes)")
            return
        
        self.logger.info(f"üöÄ Disparando organizaci√≥n autom√°tica: {reason}")
        
        try:
            # Ejecutar organizaci√≥n
            result = subprocess.run([
                sys.executable, self.organizer_script, '--dry-run'
            ], capture_output=True, text=True, cwd=Path(self.organizer_script).parent)
            
            if result.returncode == 0:
                # Si hay archivos para mover, ejecutar organizaci√≥n real
                if "archivos para organizar" in result.stdout or "misplaced_files" in result.stdout:
                    self.logger.info("üìã Archivos detectados, ejecutando organizaci√≥n...")
                    
                    result = subprocess.run([
                        sys.executable, self.organizer_script
                    ], capture_output=True, text=True, cwd=Path(self.organizer_script).parent)
                    
                    if result.returncode == 0:
                        self.logger.info("‚úÖ Organizaci√≥n autom√°tica completada")
                        
                        # Generar reporte
                        subprocess.run([
                            sys.executable, self.organizer_script, '--report'
                        ], cwd=Path(self.organizer_script).parent)
                        
                    else:
                        self.logger.error(f"‚ùå Error en organizaci√≥n: {result.stderr}")
                else:
                    self.logger.info("‚úÖ No se encontraron archivos para organizar")
            
            self.last_organization = current_time
            
        except Exception as e:
            self.logger.error(f"‚ùå Error ejecutando organizaci√≥n: {e}")

class AutoOrganizeWatcher:
    """Observador principal para organizaci√≥n autom√°tica"""
    
    def __init__(self, base_dir: str = "code"):
        self.base_dir = Path(base_dir)
        self.organizer_script = self.base_dir / "SCRIPTS" / "auto_organize_files.py"
        self.pid_file = self.base_dir / "logs" / "watcher.pid"
        self.log_dir = self.base_dir / "logs"
        
        # Configurar logging
        self.setup_logging()
        
        # Configurar observador
        self.observer = Observer()
        self.handler = AutoOrganizeHandler(str(self.organizer_script))
        
    def setup_logging(self):
        """Configurar sistema de logging"""
        self.log_dir.mkdir(exist_ok=True)
        
        log_file = self.log_dir / 'auto_organize_watcher.log'
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        self.logger = logging.getLogger(__name__)
    
    def start_watching(self):
        """Iniciar observaci√≥n de archivos"""
        self.logger.info("üöÄ Iniciando observador de organizaci√≥n autom√°tica...")
        
        # Observar directorio code
        self.observer.schedule(self.handler, str(self.base_dir), recursive=True)
        
        # Observar directorio docs
        docs_dir = self.base_dir.parent / "docs"
        if docs_dir.exists():
            self.observer.schedule(self.handler, str(docs_dir), recursive=True)
        
        # Observar directorio production-deployment
        prod_dir = self.base_dir.parent / "production-deployment"
        if prod_dir.exists():
            self.observer.schedule(self.handler, str(prod_dir), recursive=True)
        
        self.observer.start()
        
        # Guardar PID
        self.save_pid()
        
        self.logger.info("‚úÖ Observador iniciado")
        self.logger.info(f"üìÅ Observando directorios:")
        self.logger.info(f"   - {self.base_dir}")
        if docs_dir.exists():
            self.logger.info(f"   - {docs_dir}")
        if prod_dir.exists():
            self.logger.info(f"   - {prod_dir}")
        
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.stop_watching()
    
    def stop_watching(self):
        """Detener observaci√≥n"""
        self.logger.info("üõë Deteniendo observador...")
        self.observer.stop()
        self.observer.join()
        self.remove_pid()
        self.logger.info("‚úÖ Observador detenido")
    
    def save_pid(self):
        """Guardar PID del proceso"""
        try:
            with open(self.pid_file, 'w') as f:
                f.write(str(os.getpid()))
        except Exception as e:
            self.logger.error(f"‚ùå Error guardando PID: {e}")
    
    def remove_pid(self):
        """Remover archivo PID"""
        try:
            if self.pid_file.exists():
                self.pid_file.unlink()
        except Exception as e:
            self.logger.error(f"‚ùå Error removiendo PID: {e}")
    
    def is_running(self) -> bool:
        """Verificar si el observador est√° ejecut√°ndose"""
        if not self.pid_file.exists():
            return False
        
        try:
            with open(self.pid_file, 'r') as f:
                pid = int(f.read().strip())
            
            # Verificar si el proceso existe
            os.kill(pid, 0)
            return True
        except (ValueError, OSError):
            return False
    
    def stop_daemon(self):
        """Detener proceso daemon"""
        if not self.is_running():
            self.logger.info("‚ÑπÔ∏è Observador no est√° ejecut√°ndose")
            return
        
        try:
            with open(self.pid_file, 'r') as f:
                pid = int(f.read().strip())
            
            os.kill(pid, signal.SIGTERM)
            self.logger.info(f"üõë Se√±al de detenci√≥n enviada al PID {pid}")
            
            # Esperar un poco y verificar
            time.sleep(2)
            if self.is_running():
                os.kill(pid, signal.SIGKILL)
                self.logger.info("üî® Proceso terminado forzadamente")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error deteniendo daemon: {e}")

def main():
    """Funci√≥n principal"""
    parser = argparse.ArgumentParser(description='Observador autom√°tico de organizaci√≥n de archivos')
    parser.add_argument('--daemon', action='store_true', help='Ejecutar en segundo plano')
    parser.add_argument('--stop', action='store_true', help='Detener observador daemon')
    parser.add_argument('--status', action='store_true', help='Verificar estado del observador')
    parser.add_argument('--base-dir', default='code', help='Directorio base para observaci√≥n')
    
    args = parser.parse_args()
    
    watcher = AutoOrganizeWatcher(args.base_dir)
    
    if args.status:
        if watcher.is_running():
            print("‚úÖ Observador est√° ejecut√°ndose")
        else:
            print("‚ùå Observador no est√° ejecut√°ndose")
        return
    
    if args.stop:
        watcher.stop_daemon()
        return
    
    if args.daemon:
        # Ejecutar en segundo plano
        if watcher.is_running():
            print("‚ö†Ô∏è Observador ya est√° ejecut√°ndose")
            return
        
        print("üöÄ Iniciando observador en segundo plano...")
        watcher.start_watching()
    else:
        # Ejecutar en primer plano
        print("üöÄ PAQUETES EL CLUB v3.1 - Auto Organize Watcher")
        print("=" * 60)
        print("üìÅ Observando cambios en archivos...")
        print("üõë Presiona Ctrl+C para detener")
        print()
        
        watcher.start_watching()

if __name__ == "__main__":
    main()
