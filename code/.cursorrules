# ========================================
# PAQUETES EL CLUB v3.0 - Cursor Rules
# ========================================

## üéØ **OBJETIVO DEL PROYECTO**
Sistema de gesti√≥n de paqueter√≠a con tarifas autom√°ticas, notificaciones multicanal y dashboard administrativo. 
Enfoque en modularidad, escalabilidad y mantenibilidad del c√≥digo.

## üèóÔ∏è **ARQUITECTURA Y PATRONES**

### **Principios de Dise√±o**
- **Separaci√≥n de Responsabilidades**: Cada m√≥dulo tiene una responsabilidad espec√≠fica
- **Inversi√≥n de Dependencias**: Los routers dependen de servicios, no de modelos directamente
- **Configuraci√≥n Centralizada**: Todas las configuraciones en `src/config.py`
- **Manejo de Errores Unificado**: Excepciones personalizadas en `src/utils/exceptions.py`
- **Validaciones Centralizadas**: Funciones de validaci√≥n en `src/utils/validators.py`

### **Estructura de Capas**
1. **Routers** (`src/routers/`): Manejo de HTTP requests/responses
2. **Servicios** (`src/services/`): L√≥gica de negocio
3. **Modelos** (`src/models/`): Entidades de base de datos
4. **Esquemas** (`src/schemas/`): Validaci√≥n de datos con Pydantic
5. **Utilidades** (`src/utils/`): Funciones helper y validaciones
6. **Configuraci√≥n** (`src/config.py`): Variables de entorno centralizadas

## üêç **PYTHON / FASTAPI**

### **Convenciones de C√≥digo**
- **PEP 8**: Seguir est√°ndares de Python
- **Type Hints**: Usar siempre type hints en funciones y m√©todos
- **Docstrings**: Documentar todas las funciones p√∫blicas
- **Nombres Descriptivos**: Variables y funciones con nombres claros
- **Imports Organizados**: Agrupar imports por tipo (stdlib, third-party, local)

### **FastAPI Espec√≠fico**
- **Dependency Injection**: Usar `Depends()` para inyecci√≥n de dependencias
- **Response Models**: Definir siempre modelos de respuesta con Pydantic
- **Status Codes**: Usar c√≥digos HTTP apropiados
- **Async/Await**: Usar async para operaciones I/O
- **Exception Handling**: Manejar excepciones con handlers personalizados

### **Ejemplo de Router**
```python
@router.post("/", response_model=PackageResponse)
async def create_package(
    package_data: PackageCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> PackageResponse:
    """Crear nuevo paquete con validaciones y notificaciones"""
    package_service = PackageService(db)
    return package_service.create_package(package_data)
```

## üóÑÔ∏è **SQLALCHEMY / BASE DE DATOS**

### **Convenciones de Modelos**
- **Herencia de BaseModel**: Todos los modelos heredan de `BaseModel`
- **Relaciones Expl√≠citas**: Definir todas las relaciones con `relationship()`
- **√çndices**: Crear √≠ndices para campos de b√∫squeda frecuente
- **Constraints**: Usar constraints de base de datos apropiados
- **Timestamps**: Incluir `created_at` y `updated_at` autom√°ticamente

### **Ejemplo de Modelo**
```python
class Package(BaseModel, Base):
    __tablename__ = "packages"
    
    tracking_number = Column(String(50), unique=True, nullable=False, index=True)
    status = Column(Enum(PackageStatus), default=PackageStatus.ANUNCIADO)
    
    # Relaciones
    notifications = relationship("Notification", back_populates="package")
    
    def __repr__(self):
        return f"<Package {self.tracking_number} - {self.status}>"
```

### **Migrations (Alembic)**
- **Nombres Descriptivos**: Usar nombres que describan el cambio
- **Rollback Seguro**: Siempre implementar `downgrade()`
- **Datos de Prueba**: Incluir datos de prueba en migraciones cuando sea apropiado

## üîß **SERVICIOS DE NEGOCIO**

### **Principios de Servicios**
- **L√≥gica de Negocio**: Toda la l√≥gica compleja va en servicios
- **Transacciones**: Manejar transacciones de base de datos apropiadamente
- **Validaciones**: Validar datos antes de procesar
- **Notificaciones**: Enviar notificaciones despu√©s de operaciones exitosas
- **Logging**: Registrar operaciones importantes

### **Ejemplo de Servicio**
```python
class PackageService:
    def __init__(self, db: Session):
        self.db = db
        self.rate_service = RateService(db)
        self.notification_service = NotificationService(db)
    
    def create_package(self, package_data: PackageCreate) -> Package:
        # Validaciones
        # C√°lculos de tarifas
        # Crear en BD
        # Enviar notificaciones
        # Retornar resultado
```

## üõ°Ô∏è **SEGURIDAD Y VALIDACI√ìN**

### **Autenticaci√≥n y Autorizaci√≥n**
- **JWT Tokens**: Usar tokens JWT para autenticaci√≥n
- **Roles y Permisos**: Implementar sistema de roles (admin, operator, user)
- **Password Hashing**: Usar bcrypt para hashing de contrase√±as
- **Rate Limiting**: Implementar l√≠mites de rate para APIs

### **Validaci√≥n de Datos**
- **Pydantic Schemas**: Usar Pydantic para validaci√≥n de entrada
- **Validaciones Personalizadas**: Crear validadores espec√≠ficos del dominio
- **Sanitizaci√≥n**: Sanitizar datos de entrada
- **Validaciones de Negocio**: Validar reglas de negocio en servicios

### **Ejemplo de Validaci√≥n**
```python
def validate_phone_number(phone: str) -> bool:
    """Validar formato de n√∫mero de tel√©fono colombiano"""
    pattern = r'^(\+57\s?)?(3\d{2})\s?(\d{3})\s?(\d{4})$'
    return bool(re.match(pattern, phone))
```

## üê≥ **DOCKER / CONTAINERS**

### **Dockerfile**
- **Multi-stage Builds**: Usar multi-stage para optimizar tama√±o
- **Security**: Ejecutar como usuario no-root
- **Caching**: Optimizar capas para mejor caching
- **Health Checks**: Incluir health checks apropiados

### **Docker Compose**
- **Networks**: Usar redes personalizadas para aislamiento
- **Volumes**: Montar vol√∫menes para persistencia
- **Environment Variables**: Usar archivos .env para configuraci√≥n
- **Dependencies**: Definir dependencias entre servicios

## üìä **MONITOREO Y LOGGING**

### **Logging**
- **Structured Logging**: Usar logging estructurado con contextos
- **Log Levels**: Usar niveles apropiados (DEBUG, INFO, WARNING, ERROR)
- **Log Rotation**: Configurar rotaci√≥n de logs
- **Centralized Logging**: Enviar logs a sistema centralizado

### **M√©tricas**
- **Prometheus**: Exponer m√©tricas en formato Prometheus
- **Custom Metrics**: Definir m√©tricas espec√≠ficas del negocio
- **Health Checks**: Endpoints de health check
- **Performance Monitoring**: Monitorear tiempos de respuesta

## üé® **FRONTEND / TEMPLATES**

### **HTML/Templates**
- **Semantic HTML**: Usar HTML sem√°ntico apropiado
- **Accessibility**: Seguir est√°ndares de accesibilidad (WCAG 2.1 AA)
- **Responsive Design**: Dise√±o mobile-first
- **SEO**: Optimizar para motores de b√∫squeda

### **Estructura de P√°ginas (OBLIGATORIO)**
- **Header Completo**: Todas las p√°ginas deben incluir el mismo header con navegaci√≥n completa
- **Footer Sticky**: Todas las p√°ginas deben incluir el mismo footer sticky (pegado al fondo)
- **Ancho Completo**: Tanto el header como el footer deben tener ancho completo (full-width)
- **Layout Base**: Todas las p√°ginas deben extender `components/base.html`
- **Consistencia**: Mantener la misma estructura visual en todas las p√°ginas
- **Navegaci√≥n**: Incluir navegaci√≥n completa en el sidebar
- **Responsive**: Asegurar que header y footer funcionen en m√≥viles

### **Tailwind CSS**
- **Utility Classes**: Usar clases de utilidad de Tailwind
- **Custom Components**: Crear componentes reutilizables
- **Responsive**: Usar breakpoints apropiados
- **Dark Mode**: Preparar para modo oscuro

### **HTMX**
- **Progressive Enhancement**: Mejorar funcionalidad gradualmente
- **Loading States**: Mostrar estados de carga
- **Error Handling**: Manejar errores apropiadamente
- **Validation**: Validaci√≥n del lado cliente

### **Alpine.js**
- **Reactivity**: Usar reactividad para UI din√°mica
- **State Management**: Manejar estado del componente
- **Event Handling**: Manejar eventos apropiadamente
- **Performance**: Optimizar para rendimiento

## üß™ **TESTING**

### **Unit Tests**
- **Pytest**: Usar pytest como framework de testing
- **Fixtures**: Crear fixtures reutilizables
- **Mocking**: Mockear dependencias externas
- **Coverage**: Mantener cobertura de c√≥digo alta

### **Integration Tests**
- **Database Testing**: Tests con base de datos real
- **API Testing**: Tests de endpoints completos
- **Authentication Testing**: Tests de autenticaci√≥n
- **Error Scenarios**: Tests de casos de error

### **Frontend Testing (REGLAS ESPEC√çFICAS)**
- **NO realizar pruebas visuales autom√°ticas**: El usuario realizar√° verificaci√≥n visual manual
- **NO crear scripts de testing visual**: No automatizar pruebas de apariencia o dise√±o
- **Solo crear pruebas t√©cnicas cuando se solicite**: Crear scripts de prueba √∫nicamente cuando el usuario solicite investigar problemas espec√≠ficos
- **Enfoque en debugging**: Las pruebas deben enfocarse en diagnosticar por qu√© algo no funciona, d√≥nde se carga algo, o por qu√© ocurre un comportamiento espec√≠fico
- **Documentar problemas**: Cuando se identifiquen problemas t√©cnicos, documentarlos en `TEST/reports/` con detalles de diagn√≥stico

### **Documentaci√≥n Autom√°tica de Pruebas**
- **SCRIPTS/**: Todos los scripts de automatizaci√≥n, despliegue y pruebas deben guardarse en `SCRIPTS/`
- **TEST/**: Todos los reportes, resultados y documentaci√≥n de pruebas deben guardarse en `TEST/`
- **Estructura Obligatoria**: Cada script o prueba debe documentarse con:
  - Descripci√≥n del prop√≥sito
  - Comandos de ejecuci√≥n
  - Resultados esperados
  - Dependencias requeridas
  - Fecha de creaci√≥n/actualizaci√≥n

### **Reglas de Documentaci√≥n de Scripts**
```bash
# Estructura obligatoria para scripts en SCRIPTS/
#!/bin/bash
# ========================================
# PAQUETES EL CLUB v3.0 - [Nombre del Script]
# ========================================
#
# üéØ OBJETIVO: Descripci√≥n del prop√≥sito
# üìÖ FECHA: YYYY-MM-DD
# üë§ AUTOR: [Nombre del desarrollador]
# üîÑ VERSI√ìN: [Versi√≥n del script]
#
# üìã USO:
#   ./script-name.sh [par√°metros]
#
# üìä RESULTADOS:
#   - Archivo de log: logs/script-name.log
#   - Reporte: TEST/reports/script-name-report.md
#   - Datos: TEST/results/script-name/
#
# ‚ö†Ô∏è DEPENDENCIAS:
#   - [Lista de dependencias]
#
# ========================================
```

### **Reglas de Documentaci√≥n de Pruebas**
```markdown
# Estructura obligatoria para reportes en TEST/reports/
# ========================================
# PAQUETES EL CLUB v3.0 - [Nombre de la Prueba]
# ========================================
#
# üéØ OBJETIVO: Descripci√≥n del objetivo de la prueba
# üìÖ FECHA: YYYY-MM-DD HH:MM:SS
# üë§ EJECUTOR: [Nombre del ejecutor]
# üîÑ VERSI√ìN: [Versi√≥n del sistema probado]
#
# üìä RESULTADOS:
#   - Estado: ‚úÖ PASS / ‚ùå FAIL
#   - Tiempo de ejecuci√≥n: XX.XX segundos
#   - Errores encontrados: X
#   - Advertencias: X
#
# üîç DETALLES:
#   [Comandos ejecutados y resultados]
#
# üìà M√âTRICAS:
#   [M√©tricas de rendimiento y calidad]
#
# ‚úÖ CONCLUSIONES:
#   [Resumen y recomendaciones]
#
# ========================================
```

### **Ejemplo de Test**
```python
def test_create_package_success(db_session):
    """Test crear paquete exitosamente"""
    package_service = PackageService(db_session)
    package_data = PackageCreate(...)
    
    result = package_service.create_package(package_data)
    
    assert result.tracking_number.startswith("PAP")
    assert result.status == PackageStatus.ANUNCIADO
```

## üìù **DOCUMENTACI√ìN**

### **C√≥digo**
- **Docstrings**: Documentar todas las funciones p√∫blicas
- **Type Hints**: Usar type hints para documentar tipos
- **Comments**: Comentar l√≥gica compleja
- **README**: Mantener README actualizado

### **API Documentation**
- **OpenAPI/Swagger**: Documentaci√≥n autom√°tica con FastAPI
- **Examples**: Incluir ejemplos de uso
- **Error Responses**: Documentar respuestas de error
- **Authentication**: Documentar autenticaci√≥n

## üöÄ **DEPLOYMENT**

### **Environment Configuration**
- **Environment Variables**: Usar variables de entorno para configuraci√≥n
- **Secrets Management**: Manejar secretos apropiadamente
- **Configuration Validation**: Validar configuraci√≥n al inicio
- **Feature Flags**: Usar feature flags para funcionalidades

### **CI/CD**
- **Automated Testing**: Tests autom√°ticos en pipeline
- **Code Quality**: Checks de calidad de c√≥digo
- **Security Scanning**: Escaneo de vulnerabilidades
- **Automated Deployment**: Despliegue autom√°tico

## üîç **DEBUGGING Y TROUBLESHOOTING**

### **Logging**
- **Structured Logs**: Logs estructurados para f√°cil parsing
- **Context Information**: Incluir contexto relevante
- **Error Tracking**: Integrar con sistema de tracking de errores
- **Performance Logging**: Log de m√©tricas de rendimiento

### **Development Tools**
- **Hot Reload**: Configurar hot reload para desarrollo
- **Debug Mode**: Modo debug con informaci√≥n detallada
- **Database Tools**: Herramientas para inspeccionar BD
- **API Testing**: Herramientas para probar APIs

## üìã **CHECKLIST DE CALIDAD**

### **Antes de Commit**
- [ ] Tests pasan
- [ ] Linting sin errores
- [ ] Type checking sin errores
- [ ] Documentaci√≥n actualizada
- [ ] Logs apropiados agregados
- [ ] Manejo de errores implementado

### **Antes de Deploy**
- [ ] Tests de integraci√≥n pasan
- [ ] Performance tests pasan
- [ ] Security scan limpio
- [ ] Configuraci√≥n validada
- [ ] Backup configurado
- [ ] Monitoring configurado

---

## üéØ **PRIORIDADES DE DESARROLLO**

1. **Funcionalidad Core**: Paquetes, clientes, tarifas
2. **Autenticaci√≥n**: Sistema de usuarios y roles
3. **Notificaciones**: Email y SMS
4. **Dashboard**: M√©tricas y reportes
5. **Optimizaci√≥n**: Performance y escalabilidad
6. **Seguridad**: Hardening y auditor√≠a
7. **UX/UI**: Mejoras de interfaz
8. **Integraci√≥n**: APIs externas

---

**√öltima actualizaci√≥n**: Enero 2025  
**Versi√≥n**: 3.0.0  
**Mantenido por**: Equipo de Desarrollo PAQUETES EL CLUB
