"""fix user table structure

Revision ID: 8577f765fb12
Revises: 005
Create Date: 2025-08-29 07:05:35.441174

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8577f765fb12'
down_revision = '005'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Agregar nueva columna full_name
    op.add_column('users', sa.Column('full_name', sa.String(length=100), nullable=True))
    
    # Migrar datos de first_name y last_name a full_name
    op.execute("UPDATE users SET full_name = CONCAT(first_name, ' ', last_name) WHERE first_name IS NOT NULL AND last_name IS NOT NULL")
    op.execute("UPDATE users SET full_name = COALESCE(first_name, '') WHERE full_name IS NULL AND first_name IS NOT NULL")
    op.execute("UPDATE users SET full_name = COALESCE(last_name, '') WHERE full_name IS NULL AND last_name IS NOT NULL")
    op.execute("UPDATE users SET full_name = 'Usuario' WHERE full_name IS NULL OR full_name = ''")
    
    # Hacer full_name NOT NULL
    op.alter_column('users', 'full_name', nullable=False)
    
    # Agregar otras columnas
    op.add_column('users', sa.Column('hashed_password', sa.String(length=255), nullable=True))
    op.execute("UPDATE users SET hashed_password = password_hash WHERE password_hash IS NOT NULL")
    op.execute("UPDATE users SET hashed_password = 'placeholder_hash' WHERE hashed_password IS NULL")
    op.alter_column('users', 'hashed_password', nullable=False)
    
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.execute("UPDATE users SET is_verified = true")
    op.alter_column('users', 'is_verified', nullable=False)
    
    op.add_column('users', sa.Column('notes', sa.Text(), nullable=True))
    
    # Hacer is_active NOT NULL
    op.alter_column('users', 'is_active', nullable=False)
    
    # Hacer role NOT NULL
    op.alter_column('users', 'role', nullable=False)
    
    # Hacer created_at y updated_at NOT NULL
    op.alter_column('users', 'created_at', nullable=False)
    op.alter_column('users', 'updated_at', nullable=False)
    
    # Eliminar columnas antiguas
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'permissions')
    op.drop_column('users', 'last_name')
    op.drop_column('users', 'first_name')
    op.drop_column('users', 'password_hash')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.alter_column('users', 'updated_at', nullable=True)
    op.alter_column('users', 'created_at', nullable=True)
    op.alter_column('users', 'role', nullable=True)
    op.alter_column('users', 'is_active', nullable=True)
    op.drop_column('users', 'notes')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'full_name')
    # ### end Alembic commands ###
