#!/bin/bash

# ========================================
# PAQUETERIA v3.1 - Ejecutor de Validaci√≥n Autom√°tica
# ========================================

echo "üõ°Ô∏è  SISTEMA DE VALIDACI√ìN AUTOM√ÅTICA"
echo "======================================"
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar resultados
show_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# Funci√≥n para mostrar informaci√≥n
show_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Funci√≥n para mostrar advertencia
show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Funci√≥n para mostrar error
show_error() {
    echo -e "${RED}üí• $1${NC}"
}

# Funci√≥n para mostrar √©xito
show_success() {
    echo -e "${GREEN}üéâ $1${NC}"
}

# Verificar que estamos en el directorio correcto
if [ ! -f "validate-all.py" ]; then
    show_error "Este script debe ejecutarse desde el directorio ra√≠z del proyecto"
    show_info "Directorio actual: $(pwd)"
    show_info "Archivos esperados: validate-all.py, validate-model-sync.py, etc."
    exit 1
fi

# Verificar que Python est√© disponible
if ! command -v python3 &> /dev/null; then
    show_error "Python3 no est√° disponible"
    show_info "Instala Python3 o verifica que est√© en el PATH"
    exit 1
fi

# Verificar que Docker est√© disponible
if ! command -v docker &> /dev/null; then
    show_warning "Docker no est√° disponible"
    show_info "Algunas validaciones pueden fallar"
fi

# Verificar que los scripts de validaci√≥n existan
required_scripts=(
    "validate-all.py"
    "validate-model-sync.py"
    "validate-migrations.py"
    "advanced-health-check.py"
)

missing_scripts=()
for script in "${required_scripts[@]}"; do
    if [ ! -f "$script" ]; then
        missing_scripts+=("$script")
    fi
done

if [ ${#missing_scripts[@]} -gt 0 ]; then
    show_error "Scripts de validaci√≥n faltantes:"
    for script in "${missing_scripts[@]}"; do
        echo "   - $script"
    done
    exit 1
fi

show_success "Todos los scripts de validaci√≥n est√°n presentes"

# Funci√≥n para ejecutar validaci√≥n individual
run_single_validator() {
    local script_name=$1
    local description=$2
    
    echo ""
    show_info "Ejecutando: $description"
    echo "Script: $script_name"
    echo "----------------------------------------"
    
    if python3 "$script_name"; then
        show_success "$description completado exitosamente"
        return 0
    else
        show_error "$description fall√≥"
        return 1
    fi
}

# Funci√≥n para ejecutar validaci√≥n completa
run_complete_validation() {
    echo ""
    show_info "Ejecutando validaci√≥n completa del sistema..."
    echo "=================================================="
    
    if python3 validate-all.py; then
        show_success "Validaci√≥n completa exitosa"
        return 0
    else
        show_error "Validaci√≥n completa fall√≥"
        return 1
    fi
}

# Funci√≥n para mostrar men√∫
show_menu() {
    echo ""
    echo "üìã MEN√ö DE VALIDACI√ìN:"
    echo "1. Validaci√≥n de Sincronizaci√≥n de Modelos"
    echo "2. Validaci√≥n de Migraciones Alembic"
    echo "3. Health Check Avanzado"
    echo "4. Validaci√≥n Completa del Sistema"
    echo "5. Ejecutar todas las validaciones en secuencia"
    echo "6. Salir"
    echo ""
    read -p "Selecciona una opci√≥n (1-6): " choice
}

# Funci√≥n para ejecutar opci√≥n del men√∫
execute_option() {
    case $1 in
        1)
            run_single_validator "validate-model-sync.py" "Validaci√≥n de Sincronizaci√≥n de Modelos"
            ;;
        2)
            run_single_validator "validate-migrations.py" "Validaci√≥n de Migraciones Alembic"
            ;;
        3)
            run_single_validator "advanced-health-check.py" "Health Check Avanzado"
            ;;
        4)
            run_complete_validation
            ;;
        5)
            run_all_validations
            ;;
        6)
            show_info "Saliendo..."
            exit 0
            ;;
        *)
            show_error "Opci√≥n inv√°lida: $1"
            ;;
    esac
}

# Funci√≥n para ejecutar todas las validaciones en secuencia
run_all_validations() {
    echo ""
    show_info "Ejecutando todas las validaciones en secuencia..."
    echo "=================================================="
    
    local success_count=0
    local total_count=4
    
    # 1. Validaci√≥n de Modelos
    if run_single_validator "validate-model-sync.py" "Validaci√≥n de Sincronizaci√≥n de Modelos"; then
        ((success_count++))
    fi
    
    # 2. Validaci√≥n de Migraciones
    if run_single_validator "validate-migrations.py" "Validaci√≥n de Migraciones Alembic"; then
        ((success_count++))
    fi
    
    # 3. Health Check
    if run_single_validator "advanced-health-check.py" "Health Check Avanzado"; then
        ((success_count++))
    fi
    
    # 4. Validaci√≥n Completa
    if run_complete_validation; then
        ((success_count++))
    fi
    
    # Resumen final
    echo ""
    echo "=================================================="
    echo "üìä RESUMEN FINAL DE VALIDACIONES"
    echo "=================================================="
    echo "Total de validaciones: $total_count"
    echo "Validaciones exitosas: $success_count"
    echo "Validaciones fallidas: $((total_count - success_count))"
    
    if [ $success_count -eq $total_count ]; then
        show_success "¬°TODAS LAS VALIDACIONES EXITOSAS!"
    else
        show_warning "Algunas validaciones fallaron. Revisa los resultados arriba."
    fi
}

# Funci√≥n para modo autom√°tico
run_automatic_mode() {
    echo ""
    show_info "Modo autom√°tico activado"
    show_info "Ejecutando validaci√≥n completa..."
    
    if run_complete_validation; then
        show_success "Sistema validado correctamente"
        exit 0
    else
        show_error "Sistema tiene problemas que requieren atenci√≥n"
        exit 1
    fi
}

# Funci√≥n para modo interactivo
run_interactive_mode() {
    while true; do
        show_menu
        execute_option "$choice"
        
        echo ""
        read -p "¬øContinuar con m√°s validaciones? (s/n): " continue_choice
        if [[ ! "$continue_choice" =~ ^[Ss]$ ]]; then
            break
        fi
    done
}

# Funci√≥n principal
main() {
    echo "üõ°Ô∏è  SISTEMA DE VALIDACI√ìN AUTOM√ÅTICA - PAQUETERIA v3.1"
    echo "========================================================"
    echo ""
    show_info "Este sistema te ayudar√° a prevenir problemas como:"
    echo "   - Columnas faltantes en la base de datos"
    echo "   - Migraciones no aplicadas"
    echo "   - Servicios Docker no funcionando"
    echo "   - Problemas de configuraci√≥n"
    echo ""
    
    # Verificar argumentos de l√≠nea de comandos
    if [ "$1" = "--auto" ] || [ "$1" = "-a" ]; then
        run_automatic_mode
    elif [ "$1" = "--interactive" ] || [ "$1" = "-i" ]; then
        run_interactive_mode
    elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "Uso: $0 [OPCI√ìN]"
        echo ""
        echo "Opciones:"
        echo "  --auto, -a        Ejecutar validaci√≥n autom√°tica y salir"
        echo "  --interactive, -i Ejecutar en modo interactivo"
        echo "  --help, -h        Mostrar esta ayuda"
        echo ""
        echo "Sin opciones: Modo interactivo por defecto"
        exit 0
    else
        # Modo por defecto: preguntar al usuario
        echo "Selecciona el modo de ejecuci√≥n:"
        echo "1. Autom√°tico (ejecuta y sale)"
        echo "2. Interactivo (men√∫ de opciones)"
        echo ""
        read -p "Selecciona modo (1-2): " mode_choice
        
        case $mode_choice in
            1)
                run_automatic_mode
                ;;
            2)
                run_interactive_mode
                ;;
            *)
                show_info "Modo no v√°lido, usando modo interactivo por defecto"
                run_interactive_mode
                ;;
        esac
    fi
}

# Ejecutar funci√≥n principal
main "$@"
