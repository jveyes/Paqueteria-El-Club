#!/usr/bin/env python3
"""
Script de Pruebas para las Nuevas Validaciones - PAQUETES EL CLUB v3.1
====================================================================

Pruebas para verificar que las nuevas reglas de validaci√≥n funcionen correctamente:
- No se aceptan emojis
- No se aceptan caracteres especiales peligrosos
- Tel√©fono debe tener al menos 10 d√≠gitos
- No se aceptan guiones o par√©ntesis en tel√©fonos
- Backend valida m√≠nimo 5 caracteres para gu√≠a
- No se aceptan caracteres potencialmente peligrosos
- Protecci√≥n contra SQL Injection/XSS
"""

import requests
import json
from datetime import datetime

def test_validation_cases():
    """Prueba casos de validaci√≥n con las nuevas reglas"""
    print("üöÄ INICIANDO PRUEBAS DE NUEVAS VALIDACIONES")
    print("=" * 60)
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    api_url = "http://localhost/api/announcements/"
    
    test_cases = [
        # ===== PRUEBAS DE NOMBRE =====
        {
            "name": "Nombre con emoji",
            "data": {"customer_name": "Juan P√©rez üöÄ", "guide_number": "TEST123456", "phone_number": "3001234567"},
            "expected_status": 422,
            "expected_error": "caracteres no permitidos"
        },
        {
            "name": "Nombre con caracteres especiales",
            "data": {"customer_name": "Juan@P√©rez#123", "guide_number": "TEST123456", "phone_number": "3001234567"},
            "expected_status": 422,
            "expected_error": "caracteres no permitidos"
        },
        {
            "name": "Nombre con SQL Injection",
            "data": {"customer_name": "'; DROP TABLE packages; --", "guide_number": "TEST123456", "phone_number": "3001234567"},
            "expected_status": 422,
            "expected_error": "caracteres no permitidos"
        },
        {
            "name": "Nombre con XSS",
            "data": {"customer_name": "<script>alert('XSS')</script>", "guide_number": "TEST123456", "phone_number": "3001234567"},
            "expected_status": 422,
            "expected_error": "caracteres no permitidos"
        },
        {
            "name": "Nombre v√°lido con acentos",
            "data": {"customer_name": "Jos√© Mar√≠a √ëo√±o", "guide_number": "TEST123456", "phone_number": "3001234567"},
            "expected_status": 201,
            "expected_error": None
        },
        
        # ===== PRUEBAS DE TEL√âFONO =====
        {
            "name": "Tel√©fono con guiones",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "TEST123456", "phone_number": "300-123-4567"},
            "expected_status": 422,
            "expected_error": "caracteres no permitidos"
        },
        {
            "name": "Tel√©fono con par√©ntesis",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "TEST123456", "phone_number": "(300) 123-4567"},
            "expected_status": 422,
            "expected_error": "caracteres no permitidos"
        },
        {
            "name": "Tel√©fono muy corto",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "TEST123456", "phone_number": "123456789"},
            "expected_status": 422,
            "expected_error": "al menos 10 d√≠gitos"
        },
        {
            "name": "Tel√©fono no colombiano",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "TEST123456", "phone_number": "1234567890"},
            "expected_status": 422,
            "expected_error": "n√∫mero colombiano v√°lido"
        },
        {
            "name": "Tel√©fono v√°lido celular",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "TEST123456", "phone_number": "3001234567"},
            "expected_status": 201,
            "expected_error": None
        },
        {
            "name": "Tel√©fono v√°lido fijo",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "TEST123457", "phone_number": "6012345678"},
            "expected_status": 201,
            "expected_error": None
        },
        
        # ===== PRUEBAS DE GU√çA =====
        {
            "name": "Gu√≠a muy corta",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "1234", "phone_number": "3001234567"},
            "expected_status": 422,
            "expected_error": "al menos 5 caracteres"
        },
        {
            "name": "Gu√≠a con caracteres especiales",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "TEST@123#456", "phone_number": "3001234567"},
            "expected_status": 422,
            "expected_error": "caracteres no permitidos"
        },
        {
            "name": "Gu√≠a con SQL Injection",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "'; DROP TABLE packages; --", "phone_number": "3001234567"},
            "expected_status": 422,
            "expected_error": "caracteres no permitidos"
        },
        {
            "name": "Gu√≠a v√°lida con guiones",
            "data": {"customer_name": "Juan P√©rez", "guide_number": "TEST-123-456", "phone_number": "3001234568"},
            "expected_status": 201,
            "expected_error": None
        },
        
        # ===== PRUEBAS DE SEGURIDAD =====
        {
            "name": "Datos con m√∫ltiples ataques",
            "data": {"customer_name": "<script>alert('XSS')</script>", "guide_number": "'; DROP TABLE packages; --", "phone_number": "javascript:alert('XSS')"},
            "expected_status": 422,
            "expected_error": "caracteres no permitidos"
        },
        {
            "name": "Datos completamente v√°lidos",
            "data": {"customer_name": "Mar√≠a Jos√© Gonz√°lez", "guide_number": "ABC123DEF", "phone_number": "3001234569"},
            "expected_status": 201,
            "expected_error": None
        }
    ]
    
    passed = 0
    failed = 0
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Prueba {i}: {test_case['name']}")
        print("-" * 40)
        
        try:
            response = requests.post(api_url, json=test_case["data"])
            
            if response.status_code == test_case["expected_status"]:
                print(f"‚úÖ Status correcto: {response.status_code}")
                
                # Verificar mensaje de error si se esperaba uno
                if test_case["expected_error"]:
                    try:
                        error_data = response.json()
                        error_message = str(error_data)
                        if test_case["expected_error"] in error_message:
                            print(f"‚úÖ Error esperado encontrado: '{test_case['expected_error']}'")
                            passed += 1
                        else:
                            print(f"‚ùå Error esperado no encontrado. Esperado: '{test_case['expected_error']}', Recibido: '{error_message}'")
                            failed += 1
                    except:
                        print(f"‚ùå No se pudo parsear el error")
                        failed += 1
                else:
                    print(f"‚úÖ Respuesta exitosa")
                    passed += 1
                    
            else:
                print(f"‚ùå Status incorrecto. Esperado: {test_case['expected_status']}, Recibido: {response.status_code}")
                failed += 1
                
                # Mostrar detalles del error
                try:
                    error_data = response.json()
                    print(f"   Error: {error_data}")
                except:
                    print(f"   Error: {response.text}")
                    
        except Exception as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            failed += 1
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    print(f"Total de pruebas: {len(test_cases)}")
    print(f"Pruebas exitosas: {passed}")
    print(f"Pruebas fallidas: {failed}")
    print(f"Tasa de √©xito: {(passed/len(test_cases))*100:.1f}%")
    
    if failed == 0:
        print("\nüéâ ¬°Todas las validaciones funcionan correctamente!")
    else:
        print(f"\n‚ö†Ô∏è {failed} pruebas fallaron. Revisar implementaci√≥n.")
    
    return passed, failed

if __name__ == "__main__":
    test_validation_cases()
